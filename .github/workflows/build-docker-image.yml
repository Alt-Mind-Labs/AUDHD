name: 0 üöÄ Build, Version & Push Web App Image
run-name: ‚û°Ô∏è ${{ github.ref }} (${{ github.event_name }})

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'Dockerfile'
      - '.github/scripts/release-and-build.sh'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: aijourney-webapp
      GITHUB_REPO_OWNER: ${{ github.repository_owner }}

    steps:
      - name: Checkout full history & tags
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set Git identity
        run: |
          git config user.email "actions@github.com"
          git config user.name  "GitHub Actions"

      - name: Set up QEMU for ARM builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Release, Build & Push (multi-arch)
        id: release_build_push
        env:
          GITHUB_SHA:           ${{ github.sha }}
          GITHUB_EVENT_BEFORE:  ${{ github.event.before }}
          IMAGE_NAME:           ${{ env.IMAGE_NAME }}
          GITHUB_REPO_OWNER:    ${{ github.repository_owner }}
        run: |
          bash ./.github/scripts/release-and-build.sh
          echo "new_version=$(< latest_version.txt)" >> "$GITHUB_OUTPUT"

      - name: Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "ghcr.io/${{ env.GITHUB_REPO_OWNER }}/${{ env.IMAGE_NAME }}:${{ steps.release_build_push.outputs.new_version }}"
          scan-type: image
          format: 'table'
          output: 'vulnerabilities.txt'
          github-pat: ${{ secrets.GITHUB_TOKEN }} # or ${{ secrets.github_pat_name }} if you're using a PAT
          severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
          scanners: "vuln"
          exit-code: '0'
          ignore-unfixed: false

      - name: Upload trivy report as a Github artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-vulnerabilities
          path: '${{ github.workspace }}/vulnerabilities.txt'
          retention-days: 20 # 90 is the default

      - name: Run Trivy vulnerability scanner
        run: |
          REPO_URI=ghcr.io/${{ env.GITHUB_REPO_OWNER }}/${{ env.IMAGE_NAME }}
          VERSION=${{ steps.release_build_push.outputs.new_version }}
          echo "üîç Scanning ${REPO_URI}:${VERSION}"
          trivy image --exit-code 1 --severity HIGH,CRITICAL \
            "${REPO_URI}:${VERSION}"

      - name: Upload latest version
        uses: actions/upload-artifact@v4
        with:
          name: webapp-latest-version
          path: latest_version.txt

      - name: Find previous tag
        id: prev
        run: |
          prev=$(git tag --list '*@v*.*.*' --sort=-v:refname | sed -n '2q')
          echo "prev_tag=$prev" >> "$GITHUB_OUTPUT"

      - name: Build changelog
        id: changelog
        run: |
          NEW_TAG=${{ env.IMAGE_NAME }}:${{ steps.release_build_push.outputs.new_version }}
          log=$(git log "${{ steps.prev.outputs.prev_tag }}"..$NEWTAG \
                 --pretty=format:'- %s')
          echo "changelog<<EOF" >> "$GITHUB_OUTPUT"
          echo "$log"           >> "$GITHUB_OUTPUT"
          echo "EOF"            >> "$GITHUB_OUTPUT"

      - name: Find PR for this tag
        id: pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const sha = context.payload.ref.replace('refs/tags/', '');
            const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              commit_sha: sha
            });
            return prs.data.length ? prs.data[0] : {};

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag:  ${{ env.IMAGE_NAME }}:${{ steps.release_build_push.outputs.new_version }}
          name: Release  ${{ env.IMAGE_NAME }}:${{ steps.release_build_push.outputs.new_version }}
          body: |
            ## üìù Changelog
            ${{ steps.changelog.outputs.changelog }}

            ## üîó Source Pull Request
            [#${{ fromJson(steps.pr.outputs.result).number }}](
              ${{ fromJson(steps.pr.outputs.result).html_url }}
            ) ‚Äî ${{ fromJson(steps.pr.outputs.result).title }}

            ${{ fromJson(steps.pr.outputs.result).body }}

